# [v] ◦ choose the port and host of each "server"
# [v] ◦ setup the server_names or not (server_name)
# [ ] ◦ The first server for a host:port will be the default for this host:port (meaning
#	 			it will answer to all request that doesn’t belong to an other server) (listen, )
# [v] ◦ setup default error pages (error_page)
# [v] ◦ limit client body size (client_body_limit)
# [ ] ◦ setup routes with one or multiple of the following rules/configuration (routes
#	 			wont be using regexp) (location path)
# [다시] ∗ define a list of accepted HTTP Methods for the route (method_allowed)
# [다시] ∗ define an HTTP redirection.
#		redirecton과 method_allowed의 관계 정립 다시!
# [v] ∗ define a directory or a file from where the file should be search (for example
#	 			if url /kapouet is rooted to /tmp/www, url /kapouet/pouic/toto/pouet
#				is /tmp/www/pouic/toto/pouet) (root)
# [v] ∗ turn on or off directory listing (auto_index?? 맞나요?)
# [ ] ∗ default file to answer if the request is a directory
# [ ] ∗ execute CGI based on certain file extension (for example .php)
# [ ]	 · Your program should call the cgi with the file requested as first argument
# [ ]	 · the cgi should be run in the correct directory for relative path file access
# [ ]	 · your server should work with one CGI (php-cgi, python...)
# [v] ∗ make the route able to accept uploaded files and configure where it should
#	 		be saved

http
{
  send_timeout 200
  recv_timeout 200

  server {
    listen       8080; # port number
    server_name  localhost; # host name
    error_page   404 ./404.html

    client_body_limit  2048;

    # serve static files
    location / {
      root /html/;
      index index.html
      auto_index on

      method_allowed GET POST DELETE
      cgi_info .php ./php_tester
      cgi_info .py ./python_tester
    }

    location /2/ {
      root /second/
      index index.html
      auto_index on
      error_page 401 ./401.html
      error_page 402 ./402.html

      method_allowed GET POST
      cgi_info .py ./python_tester
    }

    # 다시다시다시다시
    # 301의 경우 // 영구히 리소스가 옮겨진 경우 리소스는 새 URL이 부여되어 새로운 위치로 옮겨졌거나 이름이 바뀌었을 수 있다.
    # 웹 서버는 클라이언트에게 리소스의 이름이 바뀌었으므로， 클라이언트는 북마크를 갱신하거나 할 수 있다고 말해줄 수 있다.
    # Your HTTP response status codes must be accurate.

    # 307(tmp redirection) 301 (permanent)
    # 303이나 307 //이름 변경이 임시적이기 때문에， 서버는 클라이언트가 나중에는 원래 URl로 찾아오고 북마크도 갱신하지 않기를 원한다.
    # 303 See Other와 307 Temporary Redirect 상태 코드는 이런 종류의 리다이렉트를 위해사용된다.
    location /redir/ {
      method_allowed GET
      # POST -> Error 403 //// -> GET -> Redirect
      return 301 https://www.naver.com
    }
  }

  #server {
  #	  return 301 https://www.google.com
  #}

}